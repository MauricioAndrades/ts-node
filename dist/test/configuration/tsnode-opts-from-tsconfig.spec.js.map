{"version":3,"file":"tsnode-opts-from-tsconfig.spec.js","sourceRoot":"","sources":["../../../src/test/configuration/tsnode-opts-from-tsconfig.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { BIN_PATH } from '../helpers/paths';\nimport { createExec } from '../helpers/exec';\nimport { TEST_DIR } from '../helpers/paths';\nimport { context, expect } from '../testlib';\nimport { join, resolve } from 'path';\nimport { tsSupportsExtendsArray } from '../helpers/version-checks';\nimport { ctxTsNode } from '../helpers/ctx-ts-node';\n\nconst test = context(ctxTsNode);\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\ntest.suite('should read ts-node options from tsconfig.json', (test) => {\n  const BIN_EXEC = `\"${BIN_PATH}\" --project tsconfig-options/tsconfig.json`;\n\n  test('should override compiler options from env', async () => {\n    const r = await exec(`${BIN_EXEC} tsconfig-options/log-options1.js`, {\n      env: {\n        ...process.env,\n        TS_NODE_COMPILER_OPTIONS: '{\"typeRoots\": [\"env-typeroots\"]}',\n      },\n    });\n    expect(r.err).toBe(null);\n    const { config } = JSON.parse(r.stdout);\n    expect(config.options.typeRoots).toEqual([join(TEST_DIR, './tsconfig-options/env-typeroots').replace(/\\\\/g, '/')]);\n  });\n\n  test('should use options from `tsconfig.json`', async () => {\n    const r = await exec(`${BIN_EXEC} tsconfig-options/log-options1.js`);\n    expect(r.err).toBe(null);\n    const { options, config } = JSON.parse(r.stdout);\n    expect(config.options.typeRoots).toEqual([\n      join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(/\\\\/g, '/'),\n    ]);\n    expect(config.options.types).toEqual(['tsconfig-tsnode-types']);\n    expect(options.pretty).toBe(undefined);\n    expect(options.skipIgnore).toBe(false);\n    expect(options.transpileOnly).toBe(true);\n    expect(options.require).toEqual([join(TEST_DIR, './tsconfig-options/required1.js')]);\n  });\n\n  test('should ignore empty strings in the array options', async () => {\n    const r = await exec(`${BIN_EXEC} tsconfig-options/log-options1.js`, {\n      env: {\n        ...process.env,\n        TS_NODE_IGNORE: '',\n      },\n    });\n    expect(r.err).toBe(null);\n    const { options } = JSON.parse(r.stdout);\n    expect(options.ignore).toEqual([]);\n  });\n\n  test('should have flags override / merge with `tsconfig.json`', async () => {\n    const r = await exec(\n      `${BIN_EXEC} --skip-ignore --compiler-options \"{\\\\\"types\\\\\":[\\\\\"flags-types\\\\\"]}\" --require ./tsconfig-options/required2.js tsconfig-options/log-options2.js`\n    );\n    expect(r.err).toBe(null);\n    const { options, config } = JSON.parse(r.stdout);\n    expect(config.options.typeRoots).toEqual([\n      join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(/\\\\/g, '/'),\n    ]);\n    expect(config.options.types).toEqual(['flags-types']);\n    expect(options.pretty).toBe(undefined);\n    expect(options.skipIgnore).toBe(true);\n    expect(options.transpileOnly).toBe(true);\n    expect(options.require).toEqual([\n      join(TEST_DIR, './tsconfig-options/required1.js'),\n      './tsconfig-options/required2.js',\n    ]);\n  });\n\n  test('should have `tsconfig.json` override environment', async () => {\n    const r = await exec(`${BIN_EXEC} tsconfig-options/log-options1.js`, {\n      env: {\n        ...process.env,\n        TS_NODE_PRETTY: 'true',\n        TS_NODE_SKIP_IGNORE: 'true',\n      },\n    });\n    expect(r.err).toBe(null);\n    const { options, config } = JSON.parse(r.stdout);\n    expect(config.options.typeRoots).toEqual([\n      join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(/\\\\/g, '/'),\n    ]);\n    expect(config.options.types).toEqual(['tsconfig-tsnode-types']);\n    expect(options.pretty).toBe(true);\n    expect(options.skipIgnore).toBe(false);\n    expect(options.transpileOnly).toBe(true);\n    expect(options.require).toEqual([join(TEST_DIR, './tsconfig-options/required1.js')]);\n  });\n\n  test('should pull ts-node options from extended `tsconfig.json`', async () => {\n    const r = await exec(`${BIN_PATH} --show-config --project ./tsconfig-extends/tsconfig.json`);\n    expect(r.err).toBe(null);\n    const config = JSON.parse(r.stdout);\n    expect(config['ts-node'].require).toEqual([resolve(TEST_DIR, 'tsconfig-extends/other/require-hook.js')]);\n    expect(config['ts-node'].scopeDir).toBe(resolve(TEST_DIR, 'tsconfig-extends/other/scopedir'));\n    expect(config['ts-node'].preferTsExts).toBe(true);\n  });\n\n  test.suite('should pull ts-node options from extended `tsconfig.json`', (test) => {\n    test.if(tsSupportsExtendsArray);\n    test('test', async () => {\n      const r = await exec(`${BIN_PATH} --show-config --project ./tsconfig-extends-multiple/tsconfig.json`);\n      expect(r.err).toBe(null);\n      const config = JSON.parse(r.stdout);\n\n      // root tsconfig extends [a, c]\n      // a extends b\n      // c extends d\n\n      // https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/#supporting-multiple-configuration-files-in-extends\n      // If any fields \"conflict\", the latter entry wins.\n\n      // This value comes from c\n      expect(config.compilerOptions.target).toBe('es2017');\n\n      // From root\n      expect(config['ts-node'].preferTsExts).toBe(true);\n\n      // From a\n      expect(config['ts-node'].require).toEqual([\n        resolve(TEST_DIR, 'tsconfig-extends-multiple/a/require-hook-from-a.js'),\n      ]);\n\n      // From a, overrides declaration in b\n      expect(config['ts-node'].scopeDir).toBe(resolve(TEST_DIR, 'tsconfig-extends-multiple/a/scopedir-from-a'));\n\n      // From b\n      const key = process.platform === 'win32' ? 'b\\\\module-types-from-b' : 'b/module-types-from-b';\n      expect(config['ts-node'].moduleTypes).toStrictEqual({\n        [key]: 'cjs',\n      });\n\n      // From c, overrides declaration in b\n      expect(config['ts-node'].transpiler).toBe('transpiler-from-c');\n\n      // From d, inherited by c, overrides value from b\n      expect(config['ts-node'].ignore).toStrictEqual(['ignore-pattern-from-d']);\n    });\n  });\n});\n"]}