{"version":3,"file":"ts-import-specifiers.spec.js","sourceRoot":"","sources":["../../src/test/ts-import-specifiers.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,gCAAgC,EAAE,oCAAoC,EAAE,MAAM,WAAW,CAAC;AACxH,OAAO,EAAE,OAAO,IAAI,SAAS,EAAE,MAAM,gCAAgC,CAAC;AACtE,OAAO,EAAE,OAAO,IAAI,CAAC,EAAE,MAAM,SAAS,CAAC;AAEvC,MAAM,IAAI,GAAG,UAAU,CAAC;IACtB,GAAG,EAAE,QAAQ;CACd,CAAC,CAAC;AAEH,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEhC,IAAI,CAAC,iHAAiH,EAAE,KAAK,IAAI,EAAE;IACjI,MAAM,CAAC,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,EAAE,CAAC;IACP,CAAC,CAAC,OAAO,CACP,UAAU,EACV,CAAC,CAAA;;;;GAIF,CACA,CAAC;IACF,CAAC,CAAC,OAAO,CACP,QAAQ,EACR,CAAC,CAAA;;GAEF,CACA,CAAC;IACF,CAAC,CAAC,OAAO,CACP,SAAS,EACT,CAAC,CAAA;;GAEF,CACA,CAAC;IACF,CAAC,CAAC,WAAW,CAAC,eAAe,EAAE;QAC7B,SAAS,EAAE;YACT,wGAAwG;YACxG,8BAA8B,EAAE,IAAI;YACpC,oBAAoB,EAAE,IAAI;SAC3B;QACD,eAAe,EAAE;YACf,GAAG,EAAE,OAAO;YACZ,0BAA0B,EAAE,oCAAoC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;SACpF;KACF,CAAC,CAAC;IACH,CAAC,CAAC,KAAK,EAAE,CAAC;IAEV,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,gCAAgC,aAAa,EAAE;QACrE,GAAG,EAAE,CAAC,CAAC,GAAG;KACX,CAAC,CAAC;IACH,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC","sourcesContent":["import { context } from './testlib';\nimport * as expect from 'expect';\nimport { createExec } from './helpers/exec';\nimport { TEST_DIR, ctxTsNode, CMD_TS_NODE_WITHOUT_PROJECT_FLAG, tsSupportsAllowImportingTsExtensions } from './helpers';\nimport { project as fsProject } from '@TypeStrong/fs-fixture-builder';\nimport { outdent as o } from 'outdent';\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\nconst test = context(ctxTsNode);\n\ntest('Supports .ts extensions in import specifiers with typechecking, even though older versions of TS checker do not', async () => {\n  const p = fsProject('ts-import-specifiers');\n  p.rm();\n  p.addFile(\n    'index.ts',\n    o`\n    import { foo } from './foo.ts';\n    import { bar } from './bar.jsx';\n    console.log({ foo, bar });\n  `\n  );\n  p.addFile(\n    'foo.ts',\n    o`\n    export const foo = true;\n  `\n  );\n  p.addFile(\n    'bar.tsx',\n    o`\n    export const bar = true;\n  `\n  );\n  p.addJsonFile('tsconfig.json', {\n    'ts-node': {\n      // Can eventually make this a stable feature.  For now, `experimental` flag allows me to iterate quickly\n      experimentalTsImportSpecifiers: true,\n      experimentalResolver: true,\n    },\n    compilerOptions: {\n      jsx: 'react',\n      allowImportingTsExtensions: tsSupportsAllowImportingTsExtensions ? true : undefined,\n    },\n  });\n  p.write();\n\n  const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} ./index.ts`, {\n    cwd: p.cwd,\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout.trim()).toBe('{ foo: true, bar: true }');\n});\n"]}