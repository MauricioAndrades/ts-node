{"version":3,"file":"resolution.spec.js","sourceRoot":"","sources":["../../../src/test/configuration/resolution.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { lstatSync } from 'fs';\nimport { join } from 'path';\nimport { BIN_CWD_PATH, BIN_PATH, BIN_SCRIPT_PATH, createExec, ctxTsNode, TEST_DIR } from '../helpers';\nimport { context, expect } from '../testlib';\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\nconst test = context(ctxTsNode);\n\ntest('should locate tsconfig relative to entry-point by default', async () => {\n  const r = await exec(`${BIN_PATH} ../a/index`, {\n    cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout).toMatch(/plugin-a/);\n});\ntest('should locate tsconfig relative to entry-point via ts-node-script', async () => {\n  const r = await exec(`${BIN_SCRIPT_PATH} ../a/index`, {\n    cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout).toMatch(/plugin-a/);\n});\ntest('should locate tsconfig relative to entry-point with --script-mode', async () => {\n  const r = await exec(`${BIN_PATH} --script-mode ../a/index`, {\n    cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout).toMatch(/plugin-a/);\n});\ntest('should locate tsconfig relative to cwd via ts-node-cwd', async () => {\n  const r = await exec(`${BIN_CWD_PATH} ../a/index`, {\n    cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout).toMatch(/plugin-b/);\n});\ntest('should locate tsconfig relative to cwd in --cwd-mode', async () => {\n  const r = await exec(`${BIN_PATH} --cwd-mode ../a/index`, {\n    cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout).toMatch(/plugin-b/);\n});\ntest('should locate tsconfig relative to realpath, not symlink, when entrypoint is a symlink', async (t) => {\n  if (lstatSync(join(TEST_DIR, 'main-realpath/symlink/symlink.tsx')).isSymbolicLink()) {\n    const r = await exec(`${BIN_PATH} main-realpath/symlink/symlink.tsx`);\n    expect(r.err).toBe(null);\n    expect(r.stdout).toBe('');\n  } else {\n    t.log('Skipping');\n    return;\n  }\n});\n"]}